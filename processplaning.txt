#### Good news ######
-For now lets just assume the customer pays regularly
- later work will include payment defilement logic, and how the interest is accured for delayed payment (policy).
- the idea i have about that is to. make it such that when there is a delay of payment there is a penelty charges.
- which will allow recalculation of the monthly payment. but there will be a treshold such that if it is exceeded
- the payment range will be increased instead.
- for now loan payment is monthly but will make it varies based on customer negotiation default is monthly though.

Study bank Loan interest rate calculation and also penelty of acreuing overdues
once i am done with the loan part.
i will be moving to the frontend part.
Minimal.

#### Urgent and Todos #####################################################################################
#### Read up how does banking application works in general

---
Seed the bank upon starting the app and remove the register endpoint (done)
---
make the account number generate randomly automatically. (done)
--
remover the id from the branch creation controller ( done)
--

--
Edit Manager of a branch. (done)
--
make acccount creation flexible in terms of the number of customer id that it can be taken.
since the number of customers can vary upon creation of account. ( done )

-- consider the other servicec-
--
Transaction
  - Get transaction by transaction type (done)
--
and Loan

  - i included a loan repayment schedule entity ( to monitor loan repayment and penalty for overdue). (Removed)
  - over due will acrue some additional charges (by percentage) which will affect the overall amount to be paid. (done)
  - While the payment date will be fixed. Therefor the payment would increase for the next month. after re-evaluation (done)
  - with the new penalty charges (done)
  - optimize the loan by removing the loanRepaymentSchedul
  - change the current loan payment status. to paid if the time is not yet due but paid already,
   and to pending if within the month, finally overdue if the installment period is past but not paid yet.
   contain finaly repaymentStatus before reset. this will be udpated in the makepayment service.
   - Include a database to monitor user payment history that contains loan Id, currentDuepayment actualduepaymen
   currentdueDate, actualdueDate. this information be used to calculate the user loan score.
   - this will be the last thing i do about then move to the frontend before including email and security
   - Next project will still be banking app but Even driven Application.
Back to transaction:
  - consider mapping Transfer Transaction to the receivers end also. (done)
  - That is the transfer to an account should also be reflected in that user transaction history. (done)
---
----
Arrange Your Dtos with the repository using the optional methodology
Also try and see if you can loop inside of an hql to get speicific data from a list that is in an object.
---
AI chat
--
push notification
--



#############################################################################################################



#### Questions and Todos #####################################################################################
-- i will like to reconsider the relationship if biderictional is needed
-- or maybe i can just make use of onetomany alone without a backreference.(many to one)
-- Account Type before fixing email.
    --- constrain on the amount of account that can be created by one user with respect to the account type
-- Email configuration
    - monthly emailing of transaction history for the month and belance etc.
-- Security Configuration
       there would be levels of access based on Manager (equivalent to branch),
        Bank Staff (equivalent to viewing transactions, report and auditing, reporting, monitory etc)
-- other Service like auditing will be considered later.
-- Consider using uuid to id transaction instead of numbers



-----------------------------------
i am just focused on normal crud operation for each entity.
afterwards i will settle the connections between the different services.
the influentital service and the more business intrecate logic connects each service.
----
// consider this?
// every creation of manager should have a branch initiated.
// so i will include creation of a branch in the constructor of a manager
// so branch would not be created without a manager
// the manager of a branch can be updated
// which will automatically displace the other manager
// so it means a manager can be created without a branch and then later attached to a branch
// then another manager can be deleted and removed from being the manager of that branch hence the branch
// under that manager would be null
-----

---
look into proper logging managment in spring boot using the right tool
loggin best practice: using s4jl whatever or any other tools.
----

---
why not is System.out.println not prefered over the other loggins or are they not doing same thing loggins
---

---
Adjust to meet best practice implement DTos and ModelMapper and proper Loggins and Error Handling
using custome Error Handler as the case may be.
---

---
The Bank will later be seeded and any point of Api contact for registering new
Bank will be removed but edit will be allowed. (done)
--
there would be access levels
the bank overall access
customers transactions and financial plan and loan
Branch level that managers there own customers account for them. ( customers regiesterd under them)
--

----
auto generate bank branch code (done)
---

---
include the needed field (ok)
--
#############################################################################################################



####### Progress and Where am at ################################################################################
i am done with the first stage which is to
get the basic crud operations out the door...
What connects this core entities are transaction and loan
i could have kept the loan inside the transaction but i like a thorough seperation of concern
----
now to test what i have done so far with swagger
--
next i will try to get look at the questions raised during the process
##############################################################################################################




###### Back logs ################################################################################################
  - Loan - Transaction Relationship (Independent Loan only considers your balance account balance) (Later)
--
will later include branch to be able to accommodate multiple branch manager
with one active one. the rest will be historical branch managers (so there information remains).
--
--
Will include a field in the loan called loan score that will calculate if a customer is a good re-payer of debt or
not.
this will be done using the number of time a  customer made payment on time and overdue payment.
--

----
I would also like to implement bvn mechanism
---
Security will be the last thing to implement
---
consider include bankers who attend to customers loans and transaction
and also capture transaction made via atm.
--
i migth consider utilizing index on the database (for fun and learning purposes)
--
implement push notification using websocket + workerservice + localstorage
--

--
consider the entire staff database
--

--
Implement Indexing first hand
--

--
also update the both save and update to return that particular entity (this adjustment will be done when at the end time).
so it will be easy for the frontend to capture any update or save by that return so no need for extra call
---

--
include alert for overdue payment and days before over due payment.
--
################################################################################################################



######################### Answers #####################
Yes customers do not belong to a particular branch but the account that is tied to that customer
can belong to a particular branch.
----
So Manager will be assigned to branch after branch creation then the manager field of the
Branch will be updated to include the branch
################################################################################################################


